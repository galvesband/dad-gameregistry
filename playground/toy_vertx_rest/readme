 What is this:
=============

* docker/: Contains a Dockerfile. It builds from ubuntu:14.10 and installs OpenJDK8
           (full JDK, the JRE is not enough to run .java verticles). The built image
           is configured to run as 'vertx-user' and runs /bin/bash by default.

* src/:    The source code to run.
* launch_docker.sh: A very simple script that accepts a single argument: the verticle
           to run. The scripts runs docker setting up a read-only host volume 
           from src/ as /home/vertx-user/project_src and executes something like
           'vertex run project_src/$verticle'.

Right now the only code in src/ is a very simple ToyRestServer.java that isn't really
REST, it just spawns an http server wich answers everything with "Hello world.". 

 How to use it:
==============

To run it and assuming docker is correctly installed, the docker daemon is running
and the current user is able to launch containers, you need to:

1) Build the vertex image (just the first time):

 $ docker build -t "galvesband/vertx:0.3" toy_rest_server/docker

 That builds the vertx image and tags it as galvesband/vertx:0.3. The current 
 Dockerfile builds from ubuntu:14.10, updates itself and then installs
 openJDK8, wich pulls in a lot of useless packages (gstreamer, X, ... lots
 of things). The JRE is ussually enough (even the JRE-headless) but to run
 .java verticles and get vertx to compile them automatically the JDK is needed.

 The Dockerfile also downloads vertx and installs it under /opt. Also adds the
 vertx's bin directory to PATH.

2) Launch the docker image and run the verticle:

 This means start a container based on the previously builded image exposing
 the relevant port and publishing it in the host machine, while at the same
 time creating a volume from the host project directory into the container
 to be able to read the source code.

 I writed a simple shell script that works on my system called launch_docker.sh. 
 Take a look at it. It uses the script location to get the project directory
 and launch 'galvesband/vertx:0.3' (if you tagged the image with a different 
 name edit the script and change the image name) with a read-only volume
 from the host's project dir into the container's project_src dir. It also
 exposes the 1080 port from the container into the 1080 port in the host.

 $ toy_rest_server/launch_docker.sh gameregistry/ToyRestServer.java 

 The script creates a container with the volume and port setup ready and
 then executes 'vertx run project_src/$verticle' ($verticle is the argument
 of the script).

 The script will show on screen the name of the created container and
 the paths involved in the volume setup.

 To stop the container use the container name to call '$ docker stop <name>'
 or call '$ docker ps -a', look for the hash of the running container  and 
 then '$docker stop <container_hash>'. The script will remove the container
 automatically when it stops.

